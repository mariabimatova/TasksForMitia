'''
Задание 12. Почему все атрибуты класса нужно устанавливать в конструкторе __init__.

1. Создать новый файл: answer12.py

2. Добавить класс Student.
У нашего студента всего два атрибута: имя (строка) и список оценок.
Конструктор принимает один параметр - имя.
Мы предполагаем, что сначала список оценок должен быть пустым.

class Student:
    name = None
    grades = []

    def __init__(self, n):
        self.name = n

3. Очень рекомендуется устанавливать значения ВСЕХ атрибутов класса внутри конструктора.
Сейчас покажем, почему.
Добавим код:

masha = Student("masha")
petya = Student("petya")

4. Вроде хорошо, два разных студента. Добавим им оценки в атрибут grade.
Добавим код:

masha.grades.append(5)
petya.grades.append(3)

5. Выведем на экран наши объекты.

print(f"{masha.name} {masha.grades}")
print(f"{petya.name} {petya.grades}")

6. И что же мы видим??? Ужас!!!
Выполнить программу и убедиться, что выводится вот это:

masha [5, 3]
petya [5, 3]

7. Почему?
Потому что список grades у всех объектов - один и тот же список.
Мы его ОДИН раз установили в описании класса, поэтому все объекты класса Student будут иметь один список оценок.
Как же это поправить?

def __init__(self, n):
    self.name = n
    self.grades = [] # вот!


8. Вот правильное описание класса:

class Student:
    # атрибут name описывать в классе не обязательно
    # name = None
    
    # атрибут grade описывать в классе не обязательно - но потенциально опасно
    # grades = []

    def __init__(self, n):
        # метод __init__ будет работать при КАЖДОМ создании нового объекта
        # поэтому важно устанавливать значения ВСЕХ атрибутов именно здесь
        # если какой-то атрибут не описан, то он будет просто ДОБАВЛЕН
        self.name = n
        self.grades = []

9. Заменить описание класса на правильный вариант

# НЕ ПРАВИЛЬНЫЙ ВАРИАНТ
class Student:
    name = None
    grades = []

    def __init__(self, n):
        self.name = n

# ПРАВИЛЬНЫЙ ВАРИАНТ
class Student:
    def __init__(self, n):
        self.name = n
        self.grades = []

10. Выполнить программу и убедиться, что теперь программа выводит:
masha [5]
petya [3]

'''
